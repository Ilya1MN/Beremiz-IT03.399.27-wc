<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="lamsystems-it.ru" productName="LibIT_EEPROM" productVersion="1" creationDateTime="2019-11-13T09:37:45" productRelease="0"/>
  <contentHeader name="LibIT_EEPROM" modificationDateTime="2021-12-10T18:05:31" version="1">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="EeRegByte">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="EeRegWord">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="2"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="EeRegDWord">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="3"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="EeRegLWord">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="4"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="EeRegReal">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="5"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="EeRegLReal">
        <baseType>
          <struct>
            <variable name="Addr">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="Ty">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="6"/>
              </initialValue>
            </variable>
          </struct>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="EeReadByte" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegByte"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeReadLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal);
OVal:= LREAL_TO_BYTE(Func.OVal);
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeReadWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegWord"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeReadLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal);
OVal:= LREAL_TO_WORD(Func.OVal);
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeReadDWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegDWord"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeReadLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal);
OVal:= LREAL_TO_DWORD(Func.OVal);
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeReadLWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegLWord"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <LWORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeReadLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal);
OVal:= LREAL_TO_LWORD(Func.OVal);
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeReadReal" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegReal"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="0.0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeReadLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal);
OVal:= LREAL_TO_REAL(Func.OVal);
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeReadLReal" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OVal">
              <type>
                <LREAL/>
              </type>
              <initialValue>
                <simpleValue value="0.0"/>
              </initialValue>
            </variable>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[{extern void AppEe_Read(EEREADLREAL*);AppEe_Read(data__);}
]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteByte" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegByte"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeWriteLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal, Val:=BYTE_TO_LREAL(Val));
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegWord"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <WORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeWriteLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal, Val:=WORD_TO_LREAL(Val));
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteDWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegDWord"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeWriteLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal, Val:=DWORD_TO_LREAL(Val));
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteLWord" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegLWord"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <LWORD/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeWriteLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal, Val:=LWORD_TO_LREAL(Val));
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteReal" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegReal"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="0.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="RegLReal">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Func">
              <type>
                <derived name="EeWriteLReal"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RegLReal.Addr:= Reg.Addr;
RegLReal.Ty:= Reg.Ty;
Func(Ex:=Ex, Reg:=RegLReal, Val:=REAL_TO_LREAL(Val));
Ok:= Func.Ok;]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="EeWriteLReal" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Ex">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Reg">
              <type>
                <derived name="EeRegLReal"/>
              </type>
            </variable>
            <variable name="Val">
              <type>
                <LREAL/>
              </type>
              <initialValue>
                <simpleValue value="0.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Ok">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[{extern void AppEe_Write(EEWRITELREAL*);AppEe_Write(data__);}]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
   <instances>
     <configurations/>
   </instances>
</project>
